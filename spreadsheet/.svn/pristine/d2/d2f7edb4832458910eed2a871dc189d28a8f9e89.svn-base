using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace SS
{
    public partial class Form1 : Form
    {
        private Spreadsheet spreadsheet;

        public Form1()
        {
            
            InitializeComponent();

            // This an example of registering a method so that it is notified when
            // an event happens.  The SelectionChanged event is declared with a
            // delegate that specifies that all methods that register with it must
            // take a SpreadsheetPanel as its parameter and return nothing.  So we
            // register the displaySelection method below.

            // This could also be done graphically in the designer, as has been
            // demonstrated in class.
            spreadsheet = new Spreadsheet(s => true, s => s.ToUpper(), "ps6");
            spreadsheetPanel1.SelectionChanged += displaySelection;
            spreadsheetPanel1.SetSelection(2, 3);

            displaySelection(spreadsheetPanel1); // update display when loaded
        }

        // Every time the selection changes, this method is called with the
        // Spreadsheet as its parameter.  We display the current time in the cell.
        /// <summary>
        /// Updates the panel display, cellDisplayTextBox, contentsTextBox, 
        /// </summary>
        /// <param name="ss"></param>
        private void displaySelection(SpreadsheetPanel ss)
        {
            // row and col info from panel
            int row, col;
            String value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
           
            string nameOfCell = "" + GetExcelColumnName(col + 1) + (row+1); // get cell name
            var valueOfCell = spreadsheet.GetCellValue(nameOfCell); // get value of cell
            string valueOfCellString;


            // Set the value if there is a formula error
            if (valueOfCell is SpreadsheetUtilities.FormulaError)
            {
                valueOfCellString = "##########";

            }
            else
            {
                valueOfCellString = valueOfCell.ToString();
            }
           
            contentsTextBox.Text = spreadsheet.GetCellContents(nameOfCell).ToString(); // get and set contents of cell
            // set value of cell
            cellDisplayBox.Text = nameOfCell.ToString();
            valueTextBox.Text = valueOfCellString;
            ss.SetValue(col, row, valueOfCellString); // update panel
           
        }


        private string GetExcelColumnName(int columnNumber)
        {
            int dividend = columnNumber;
            string columnName = String.Empty;
            int modulo;

            while (dividend > 0)
            {
                modulo = (dividend - 1) % 26;
                columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
                dividend = (int)((dividend - modulo) / 26);
            }

            return columnName;
        }

        // Deals with the New menu
        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            SpreadsheetApplicationContext.getAppContext().RunForm(new Form1());
        }

        // Deals with the Close menu
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

      

        private void contentsTextBox_Click(object sender, EventArgs e)
        {
             
           // ss.SetValue(col, row, DateTime.Now.ToLocalTime().ToString("T"));
           //  ss.GetValue(col, row, out value);
        }

        /// <summary>
        /// Updates and saves the spreadsheet contents, spreadsheetpanel, and display value
        /// </summary>
        private void updateCells()
        {
            try
            {
                SpreadsheetPanel ss = spreadsheetPanel1;
                int row, col;
                String value;
                ss.GetSelection(out col, out row);
                ss.GetValue(col, row, out value);
                string nameOfCell = cellDisplayBox.Text = "" + GetExcelColumnName(col + 1) + (row + 1);
                spreadsheet.SetContentsOfCell(nameOfCell, contentsTextBox.Text);
                displaySelection(spreadsheetPanel1);
                checkForFormulaError();
            }
            // Catch formulaFormatException and circula exceptions and display a message
            catch (SpreadsheetUtilities.FormulaFormatException e)
            {
                MessageBox.Show(e.Message);
            }
            catch (SS.CircularException e)
            {
                MessageBox.Show("A cicular dependency was detected. Make sure the cell's formula doesn't depend on itself.");
            }



        }

        private void contentsTextBox_Leave(object sender, EventArgs e)
        {
           // checkForFormulaError();
            updateCells();
           
        }

        private void cellDisplayBox_TextUpdate(object sender, EventArgs e)
        {
            
            contentsTextBox.Text = "";
        }

        private void contentsTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

              //  checkForFormulaError();
                updateCells();
            }
        }

        /// <summary>
        /// Checks if there is a formula error, if so displays an error message
        /// </summary>
        private void checkForFormulaError()
        {
            // row and col info from panel
            int row, col;
            String value;
            spreadsheetPanel1.GetSelection(out col, out row);
            spreadsheetPanel1.GetValue(col, row, out value);

            string nameOfCell = "" + GetExcelColumnName(col + 1) + (row + 1); // get cell name
            var valueOfCell = spreadsheet.GetCellContents(nameOfCell); // get value of cell
            // Display error if formula error
            if (valueOfCell is SpreadsheetUtilities.FormulaError)
            {

                MessageBox.Show(((SpreadsheetUtilities.FormulaError)valueOfCell).Reason);


            }
        }


       

    

     

     

      
    }
}
