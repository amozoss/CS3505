// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Tests_recalculation - Use 'Tests_recalculationParams' to pass parameters into this method.
        /// </summary>
        public void Tests_recalculation()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UIForm1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIForm1Window.UIItemWindow1.UIItemEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(29, 35));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(42, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(218, 98));

            // Type '=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.Tests_recalculationParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '=a1+a2' in 'Unknown Name' text box
            uIItemEdit.Text = this.Tests_recalculationParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Tests_recalculationParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 38));

            // Type '3' in 'Unknown Name' text box
            uIItemEdit.Text = this.Tests_recalculationParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Tests_recalculationParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(44, 59));

            // Type '4' in 'Unknown Name' text box
            uIItemEdit.Text = this.Tests_recalculationParams.UIItemEditText2;

            // Type '{Enter}{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Tests_recalculationParams.UIItemEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// Test_close_button - Use 'Test_close_buttonParams' to pass parameters into this method.
        /// </summary>
        public void Test_close_button()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIForm1Window.UIItemWindow1.UIItemEdit;
            WinMenuItem uICloseMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(46, 42));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(16, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(217, 95));

            // Type '=4' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_close_buttonParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Test_close_buttonParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(43, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(28, 15));
        }
        
        /// <summary>
        /// Test_formula_updating - Use 'Test_formula_updatingParams' to pass parameters into this method.
        /// </summary>
        public void Test_formula_updating()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.Test_formula_updatingParams.UIPS6SpreadsheetWindowExePath, this.Test_formula_updatingParams.UIPS6SpreadsheetWindowAlternateExePath);

            // Type '=A1+A2' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_formula_updatingParams.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 49));

            // Type '11' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_formula_updatingParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Test_formula_updatingParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(87, 54));

            // Type '4' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_formula_updatingParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Test_formula_updatingParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Test_simple_add - Use 'Test_simple_addParams' to pass parameters into this method.
        /// </summary>
        public void Test_simple_add()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.Test_simple_addParams.UIPS6SpreadsheetWindowExePath, this.Test_simple_addParams.UIPS6SpreadsheetWindowAlternateExePath);

            // Type '=A1+A2' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_simple_addParams.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(55, 47));

            // Type '2' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_simple_addParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Test_simple_addParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 53));

            // Type '3' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_simple_addParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Test_simple_addParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// save_test - Use 'save_testParams' to pass parameters into this method.
        /// </summary>
        public void save_test()
        {
            #region Variable Declarations
            WinTreeItem uILibrariesTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UILibrariesTreeItem;
            WinTreeItem uIDocumentsTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UILibrariesTreeItem.UIDocumentsTreeItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Last mouse action was not recorded.

            // Click 'Desktop' -> 'Libraries' tree item
            Mouse.Click(uILibrariesTreeItem, new Point(99, 9));

            // Click 'Desktop' -> 'Libraries' -> 'Documents' tree item
            Mouse.Click(uIDocumentsTreeItem, new Point(89, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(33, 11));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_testParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(53, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(26, 14));
        }
        
        /// <summary>
        /// saveAs_test - Use 'saveAs_testParams' to pass parameters into this method.
        /// </summary>
        public void saveAs_test()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinEdit uITypeEdit = this.UISaveAsWindow.UIItemWindow.UITestingListItem.UITypeEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.saveAs_testParams.UIPS6SpreadsheetWindowExePath, this.saveAs_testParams.UIPS6SpreadsheetWindowAlternateExePath);

            // Type 'dsfdsf' in 'Unknown Name' text box
            uIItemEdit.Text = this.saveAs_testParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.saveAs_testParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(63, 7));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit, new Point(8, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(46, 13));
        }
        
        /// <summary>
        /// saveAs_test1 - Use 'saveAs_test1Params' to pass parameters into this method.
        /// </summary>
        public void saveAs_test1()
        {
            #region Variable Declarations
            WinText uIContentsText = this.UIPS6SpreadsheetWindow.UIToolStrip1ToolBar.UIContentsText;
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinEdit uITypeEdit = this.UISaveAsWindow.UIItemWindow.UITestingListItem.UITypeEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.saveAs_test1Params.UIPS6SpreadsheetWindowExePath, this.saveAs_test1Params.UIPS6SpreadsheetWindowAlternateExePath);

            // Click 'Contents' label
            Mouse.Click(uIContentsText, new Point(50, 19));

            // Type 'xcvxcvdsv' in 'Unknown Name' text box
            uIItemEdit.Text = this.saveAs_test1Params.UIItemEditText;

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(66, 7));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit, new Point(36, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(30, 5));
        }
        
        /// <summary>
        /// open_save - Use 'open_saveParams' to pass parameters into this method.
        /// </summary>
        public void open_save()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uISizeEdit = this.UIOpenWindow.UIItemWindow.UIDemoListItem.UISizeEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow1.UIPS6SpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.open_saveParams.UIPS6SpreadsheetWindowExePath, this.open_saveParams.UIPS6SpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 12));

            // Double-Click 'Size' text box
            Mouse.DoubleClick(uISizeEdit, new Point(10, 8));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(21, 11));
        }
        
        /// <summary>
        /// open_save1 - Use 'open_save1Params' to pass parameters into this method.
        /// </summary>
        public void open_save1()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow1.UIPS6SpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(49, 16));

            // Select 'demo' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.open_save1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.open_save1Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(41, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 10));
        }
        
        /// <summary>
        /// save_test1 - Use 'save_test1Params' to pass parameters into this method.
        /// </summary>
        public void save_test1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.save_test1Params.UIPS6SpreadsheetWindowExePath, this.save_test1Params.UIPS6SpreadsheetWindowAlternateExePath);

            // Type 'dsfdsfdsfdsf' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test1Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_test1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(47, 9));

            // Select 'testing1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_test1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(38, 4));
        }
        
        /// <summary>
        /// save_test2 - Use 'save_test2Params' to pass parameters into this method.
        /// </summary>
        public void save_test2()
        {
            #region Variable Declarations
            WinWindow uIItemWindow = this.UIPS6SpreadsheetWindow.UIToolStrip1ToolBar.UIItemWindow;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.save_test2Params.UIPS6SpreadsheetWindowExePath, this.save_test2Params.UIPS6SpreadsheetWindowAlternateExePath);

            // Click window numbered 3 in 'toolStrip1' tool bar
            Mouse.Click(uIItemWindow, new Point(12, 21));

            // Type 'sdfdsff' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.save_test2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'dsfdsf' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test2Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_test2Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(52, 9));

            // Select 'testing1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_test2Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_test2Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(38, 6));
        }
        
        /// <summary>
        /// save_test3 - Use 'save_test3Params' to pass parameters into this method.
        /// </summary>
        public void save_test3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIPS6SpreadsheetWindow = ApplicationUnderTest.Launch(this.save_test3Params.UIPS6SpreadsheetWindowExePath, this.save_test3Params.UIPS6SpreadsheetWindowAlternateExePath);

            // Type 'esfdsfs' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test3Params.UIItemEditText;

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 12));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_test3Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_test3Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(54, 16));
        }
        
        /// <summary>
        /// save_test_with_data - Use 'save_test_with_dataParams' to pass parameters into this method.
        /// </summary>
        public void save_test_with_data()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UIItemWindow1.UISpreadsheetPanel1Client;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Type '=A1+A3' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test_with_dataParams.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 42));

            // Type '2' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test_with_dataParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_test_with_dataParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(76, 72));

            // Type '3' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test_with_dataParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_test_with_dataParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 3));

            // Select 'testing.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_test_with_dataParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_test_with_dataParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(29, 4));
        }
        
        /// <summary>
        /// adding_formula - Use 'adding_formulaParams' to pass parameters into this method.
        /// </summary>
        public void adding_formula()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UIItemWindow1.UISpreadsheetPanel1Client;
            WinMenuItem uICloseMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Type '=A1+A2' in 'Unknown Name' text box
            uIItemEdit.Text = this.adding_formulaParams.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 42));

            // Type '3' in 'Unknown Name' text box
            uIItemEdit.Text = this.adding_formulaParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.adding_formulaParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(64, 58));

            // Type '4' in 'Unknown Name' text box
            uIItemEdit.Text = this.adding_formulaParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.adding_formulaParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(59, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 13));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 13));
        }
        
        /// <summary>
        /// save_test_1 - Use 'save_test_1Params' to pass parameters into this method.
        /// </summary>
        public void save_test_1()
        {
            #region Variable Declarations
            WinWindow uIItemWindow = this.UIPS6SpreadsheetWindow.UIToolStrip1ToolBar.UIItemWindow;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click window numbered 3 in 'toolStrip1' tool bar
            Mouse.Click(uIItemWindow, new Point(54, 1));

            // Type 'dfgdfg' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.save_test_1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click window numbered 3 in 'toolStrip1' tool bar
            Mouse.Click(uIItemWindow, new Point(44, 21));

            // Type 'dfg' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.save_test_1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type 'dfgdfg' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_test_1Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_test_1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(52, 15));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_test_1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_test_1Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(28, 14));
        }
        
        /// <summary>
        /// Testing_saveas - Use 'Testing_saveasParams' to pass parameters into this method.
        /// </summary>
        public void Testing_saveas()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Type 'dsfdsf' in 'Unknown Name' text box
            uIItemEdit.Text = this.Testing_saveasParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Testing_saveasParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(50, 4));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Testing_saveasParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.Testing_saveasParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(43, 7));
        }
        
        /// <summary>
        /// save_existing
        /// </summary>
        public void save_existing()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIOpenWindow.UIItemWindow.UIDemoListItem.UITypeEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow1.UIPS6SpreadsheetTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(57, 14));

            // Double-Click 'Type' text box
            Mouse.DoubleClick(uITypeEdit, new Point(9, 9));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(60, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(19, 11));
        }
        
        /// <summary>
        /// save_open2 - Use 'save_open2Params' to pass parameters into this method.
        /// </summary>
        public void save_open2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            WinMenuItem uISaveMenuItem = this.UIPS6SpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uICloseMenuItem = this.UIPS6SpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(54, 13));

            // Select 'demo' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_open2Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_open2Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(51, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(49, 8));
        }
        
        /// <summary>
        /// invalidFormula - Use 'invalidFormulaParams' to pass parameters into this method.
        /// </summary>
        public void invalidFormula()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UIPS6SpreadsheetWindow.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Type '=a100' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormulaParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormulaParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 17));

            // Type '=A1+A2+a100' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormulaParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormulaParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 38));

            // Type '3' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormulaParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormulaParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(50, 63));

            // Type '4' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormulaParams.UIItemEditText3;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormulaParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(254, 96));

            // Type '=A1+A2' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormulaParams.UIItemEditText4;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormulaParams.UIItemEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// Test_close_button1 - Use 'Test_close_button1Params' to pass parameters into this method.
        /// </summary>
        public void Test_close_button1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Type '=A1' in 'Unknown Name' text box
            uIItemEdit.Text = this.Test_close_button1Params.UIItemEditText;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 16));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(17, 17));
        }
        
        /// <summary>
        /// invalidSyntax_circularException - Use 'invalidSyntax_circularExceptionParams' to pass parameters into this method.
        /// </summary>
        public void invalidSyntax_circularException()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIFormulaErrorWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UICircularErrorWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            #endregion

            // Type '==' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidSyntax_circularExceptionParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidSyntax_circularExceptionParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(65, 11));

            // Type '=c4' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidSyntax_circularExceptionParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidSyntax_circularExceptionParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(31, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(20, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(37, 9));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(11, 11));
        }
        
        /// <summary>
        /// help_menu
        /// </summary>
        public void help_menu()
        {
            #region Variable Declarations
            WinMenuItem uIChangeSelectionsMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIChangeSelectionsMenuItem;
            WinButton uIOKButton = this.UIChangeSelectionWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIEditCellContentsMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIEditCellContentsMenuItem;
            WinButton uIOKButton1 = this.UIEditCellContentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Help' -> 'Change Selections' menu item
            Mouse.Click(uIChangeSelectionsMenuItem, new Point(48, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 14));

            // Click 'Help' -> 'Edit Cell Contents' menu item
            Mouse.Click(uIEditCellContentsMenuItem, new Point(47, 5));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(26, 16));
        }
        
        /// <summary>
        /// close
        /// </summary>
        public void close()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(46, 3));
        }
        
        /// <summary>
        /// circular_ex - Use 'circular_exParams' to pass parameters into this method.
        /// </summary>
        public void circular_ex()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UICircularErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Type '=c4' in 'Unknown Name' text box
            uIItemEdit.Text = this.circular_exParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.circular_exParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(22, 15));
        }
        
        /// <summary>
        /// closeButton_save - Use 'closeButton_saveParams' to pass parameters into this method.
        /// </summary>
        public void closeButton_save()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Type 'ddd' in 'Unknown Name' text box
            uIItemEdit.Text = this.closeButton_saveParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.closeButton_saveParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(50, 7));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.closeButton_saveParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.closeButton_saveParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(26, 13));
        }
        
        /// <summary>
        /// menuClose_save - Use 'menuClose_saveParams' to pass parameters into this method.
        /// </summary>
        public void menuClose_save()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinTitleBar uIPS6SpreadsheetTitleBar = this.UIPS6SpreadsheetWindow.UIPS6SpreadsheetTitleBar;
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uICloseMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(13, 14));

            // Click 'PS6 - Spreadsheet' title bar
            Mouse.Click(uIPS6SpreadsheetTitleBar, new Point(134, 9));

            // Type 'dddf' in 'Unknown Name' text box
            uIItemEdit.Text = this.menuClose_saveParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.menuClose_saveParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(57, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 13));

            // Select 'testing' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.menuClose_saveParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.menuClose_saveParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(9, 6));
        }
        
        /// <summary>
        /// file_new
        /// </summary>
        public void file_new()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UIPS6SpreadsheetWindow1.UIPS6SpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(37, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 11));
        }
        
        /// <summary>
        /// invalidFormula_syntax - Use 'invalidFormula_syntaxParams' to pass parameters into this method.
        /// </summary>
        public void invalidFormula_syntax()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIFormulaErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Type '=#$#' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormula_syntaxParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormula_syntaxParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(16, 12));

            // Type '=+' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormula_syntaxParams.UIItemEditText1;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormula_syntaxParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 11));

            // Type '=ererere' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormula_syntaxParams.UIItemEditText2;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormula_syntaxParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(26, 6));

            // Type '==' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormula_syntaxParams.UIItemEditText3;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormula_syntaxParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 15));

            // Type '=())' in 'Unknown Name' text box
            uIItemEdit.Text = this.invalidFormula_syntaxParams.UIItemEditText4;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.invalidFormula_syntaxParams.UIItemEditSendKeys4, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(18, 12));
        }
        
        /// <summary>
        /// save_with_different_ext - Use 'save_with_different_extParams' to pass parameters into this method.
        /// </summary>
        public void save_with_different_ext()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uISaveastypeComboBox = this.UISaveAsWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            #endregion

            // Type 'dd' in 'Unknown Name' text box
            uIItemEdit.Text = this.save_with_different_extParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.save_with_different_extParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(53, 6));

            // Select 'All files (*.*)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.save_with_different_extParams.UISaveastypeComboBoxSelectedItem;

            // Select 'testing.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.save_with_different_extParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.save_with_different_extParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// insure_ss_ext - Use 'insure_ss_extParams' to pass parameters into this method.
        /// </summary>
        public void insure_ss_ext()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPS6SpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinMenuItem uISaveasMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow1.UIFilenameEdit;
            #endregion

            // Type 'ddd' in 'Unknown Name' text box
            uIItemEdit.Text = this.insure_ss_extParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.insure_ss_extParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(51, 4));

            // Select 'testing.sss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.insure_ss_extParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.insure_ss_extParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// open_wrong_ext - Use 'open_wrong_extParams' to pass parameters into this method.
        /// </summary>
        public void open_wrong_ext()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIPS6SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow2.UIFilesoftypeComboBox;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(49, 15));

            // Select 'All files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.open_wrong_extParams.UIFilesoftypeComboBoxSelectedItem;

            // Select 'testing.txt' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.open_wrong_extParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.open_wrong_extParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 12));
        }
        
        #region Properties
        public virtual Tests_recalculationParams Tests_recalculationParams
        {
            get
            {
                if ((this.mTests_recalculationParams == null))
                {
                    this.mTests_recalculationParams = new Tests_recalculationParams();
                }
                return this.mTests_recalculationParams;
            }
        }
        
        public virtual Test_close_buttonParams Test_close_buttonParams
        {
            get
            {
                if ((this.mTest_close_buttonParams == null))
                {
                    this.mTest_close_buttonParams = new Test_close_buttonParams();
                }
                return this.mTest_close_buttonParams;
            }
        }
        
        public virtual Test_formula_updatingParams Test_formula_updatingParams
        {
            get
            {
                if ((this.mTest_formula_updatingParams == null))
                {
                    this.mTest_formula_updatingParams = new Test_formula_updatingParams();
                }
                return this.mTest_formula_updatingParams;
            }
        }
        
        public virtual Test_simple_addParams Test_simple_addParams
        {
            get
            {
                if ((this.mTest_simple_addParams == null))
                {
                    this.mTest_simple_addParams = new Test_simple_addParams();
                }
                return this.mTest_simple_addParams;
            }
        }
        
        public virtual save_testParams save_testParams
        {
            get
            {
                if ((this.msave_testParams == null))
                {
                    this.msave_testParams = new save_testParams();
                }
                return this.msave_testParams;
            }
        }
        
        public virtual saveAs_testParams saveAs_testParams
        {
            get
            {
                if ((this.msaveAs_testParams == null))
                {
                    this.msaveAs_testParams = new saveAs_testParams();
                }
                return this.msaveAs_testParams;
            }
        }
        
        public virtual saveAs_test1Params saveAs_test1Params
        {
            get
            {
                if ((this.msaveAs_test1Params == null))
                {
                    this.msaveAs_test1Params = new saveAs_test1Params();
                }
                return this.msaveAs_test1Params;
            }
        }
        
        public virtual open_saveParams open_saveParams
        {
            get
            {
                if ((this.mopen_saveParams == null))
                {
                    this.mopen_saveParams = new open_saveParams();
                }
                return this.mopen_saveParams;
            }
        }
        
        public virtual open_save1Params open_save1Params
        {
            get
            {
                if ((this.mopen_save1Params == null))
                {
                    this.mopen_save1Params = new open_save1Params();
                }
                return this.mopen_save1Params;
            }
        }
        
        public virtual save_test1Params save_test1Params
        {
            get
            {
                if ((this.msave_test1Params == null))
                {
                    this.msave_test1Params = new save_test1Params();
                }
                return this.msave_test1Params;
            }
        }
        
        public virtual save_test2Params save_test2Params
        {
            get
            {
                if ((this.msave_test2Params == null))
                {
                    this.msave_test2Params = new save_test2Params();
                }
                return this.msave_test2Params;
            }
        }
        
        public virtual save_test3Params save_test3Params
        {
            get
            {
                if ((this.msave_test3Params == null))
                {
                    this.msave_test3Params = new save_test3Params();
                }
                return this.msave_test3Params;
            }
        }
        
        public virtual save_test_with_dataParams save_test_with_dataParams
        {
            get
            {
                if ((this.msave_test_with_dataParams == null))
                {
                    this.msave_test_with_dataParams = new save_test_with_dataParams();
                }
                return this.msave_test_with_dataParams;
            }
        }
        
        public virtual adding_formulaParams adding_formulaParams
        {
            get
            {
                if ((this.madding_formulaParams == null))
                {
                    this.madding_formulaParams = new adding_formulaParams();
                }
                return this.madding_formulaParams;
            }
        }
        
        public virtual save_test_1Params save_test_1Params
        {
            get
            {
                if ((this.msave_test_1Params == null))
                {
                    this.msave_test_1Params = new save_test_1Params();
                }
                return this.msave_test_1Params;
            }
        }
        
        public virtual Testing_saveasParams Testing_saveasParams
        {
            get
            {
                if ((this.mTesting_saveasParams == null))
                {
                    this.mTesting_saveasParams = new Testing_saveasParams();
                }
                return this.mTesting_saveasParams;
            }
        }
        
        public virtual save_open2Params save_open2Params
        {
            get
            {
                if ((this.msave_open2Params == null))
                {
                    this.msave_open2Params = new save_open2Params();
                }
                return this.msave_open2Params;
            }
        }
        
        public virtual invalidFormulaParams invalidFormulaParams
        {
            get
            {
                if ((this.minvalidFormulaParams == null))
                {
                    this.minvalidFormulaParams = new invalidFormulaParams();
                }
                return this.minvalidFormulaParams;
            }
        }
        
        public virtual Test_close_button1Params Test_close_button1Params
        {
            get
            {
                if ((this.mTest_close_button1Params == null))
                {
                    this.mTest_close_button1Params = new Test_close_button1Params();
                }
                return this.mTest_close_button1Params;
            }
        }
        
        public virtual invalidSyntax_circularExceptionParams invalidSyntax_circularExceptionParams
        {
            get
            {
                if ((this.minvalidSyntax_circularExceptionParams == null))
                {
                    this.minvalidSyntax_circularExceptionParams = new invalidSyntax_circularExceptionParams();
                }
                return this.minvalidSyntax_circularExceptionParams;
            }
        }
        
        public virtual circular_exParams circular_exParams
        {
            get
            {
                if ((this.mcircular_exParams == null))
                {
                    this.mcircular_exParams = new circular_exParams();
                }
                return this.mcircular_exParams;
            }
        }
        
        public virtual closeButton_saveParams closeButton_saveParams
        {
            get
            {
                if ((this.mcloseButton_saveParams == null))
                {
                    this.mcloseButton_saveParams = new closeButton_saveParams();
                }
                return this.mcloseButton_saveParams;
            }
        }
        
        public virtual menuClose_saveParams menuClose_saveParams
        {
            get
            {
                if ((this.mmenuClose_saveParams == null))
                {
                    this.mmenuClose_saveParams = new menuClose_saveParams();
                }
                return this.mmenuClose_saveParams;
            }
        }
        
        public virtual invalidFormula_syntaxParams invalidFormula_syntaxParams
        {
            get
            {
                if ((this.minvalidFormula_syntaxParams == null))
                {
                    this.minvalidFormula_syntaxParams = new invalidFormula_syntaxParams();
                }
                return this.minvalidFormula_syntaxParams;
            }
        }
        
        public virtual save_with_different_extParams save_with_different_extParams
        {
            get
            {
                if ((this.msave_with_different_extParams == null))
                {
                    this.msave_with_different_extParams = new save_with_different_extParams();
                }
                return this.msave_with_different_extParams;
            }
        }
        
        public virtual insure_ss_extParams insure_ss_extParams
        {
            get
            {
                if ((this.minsure_ss_extParams == null))
                {
                    this.minsure_ss_extParams = new insure_ss_extParams();
                }
                return this.minsure_ss_extParams;
            }
        }
        
        public virtual open_wrong_extParams open_wrong_extParams
        {
            get
            {
                if ((this.mopen_wrong_extParams == null))
                {
                    this.mopen_wrong_extParams = new open_wrong_extParams();
                }
                return this.mopen_wrong_extParams;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UIPS6SpreadsheetWindow UIPS6SpreadsheetWindow
        {
            get
            {
                if ((this.mUIPS6SpreadsheetWindow == null))
                {
                    this.mUIPS6SpreadsheetWindow = new UIPS6SpreadsheetWindow();
                }
                return this.mUIPS6SpreadsheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIPS6SpreadsheetWindow1 UIPS6SpreadsheetWindow1
        {
            get
            {
                if ((this.mUIPS6SpreadsheetWindow1 == null))
                {
                    this.mUIPS6SpreadsheetWindow1 = new UIPS6SpreadsheetWindow1();
                }
                return this.mUIPS6SpreadsheetWindow1;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UIFormulaErrorWindow UIFormulaErrorWindow
        {
            get
            {
                if ((this.mUIFormulaErrorWindow == null))
                {
                    this.mUIFormulaErrorWindow = new UIFormulaErrorWindow();
                }
                return this.mUIFormulaErrorWindow;
            }
        }
        
        public UICircularErrorWindow UICircularErrorWindow
        {
            get
            {
                if ((this.mUICircularErrorWindow == null))
                {
                    this.mUICircularErrorWindow = new UICircularErrorWindow();
                }
                return this.mUICircularErrorWindow;
            }
        }
        
        public UIChangeSelectionWindow UIChangeSelectionWindow
        {
            get
            {
                if ((this.mUIChangeSelectionWindow == null))
                {
                    this.mUIChangeSelectionWindow = new UIChangeSelectionWindow();
                }
                return this.mUIChangeSelectionWindow;
            }
        }
        
        public UIEditCellContentsWindow UIEditCellContentsWindow
        {
            get
            {
                if ((this.mUIEditCellContentsWindow == null))
                {
                    this.mUIEditCellContentsWindow = new UIEditCellContentsWindow();
                }
                return this.mUIEditCellContentsWindow;
            }
        }
        #endregion
        
        #region Fields
        private Tests_recalculationParams mTests_recalculationParams;
        
        private Test_close_buttonParams mTest_close_buttonParams;
        
        private Test_formula_updatingParams mTest_formula_updatingParams;
        
        private Test_simple_addParams mTest_simple_addParams;
        
        private save_testParams msave_testParams;
        
        private saveAs_testParams msaveAs_testParams;
        
        private saveAs_test1Params msaveAs_test1Params;
        
        private open_saveParams mopen_saveParams;
        
        private open_save1Params mopen_save1Params;
        
        private save_test1Params msave_test1Params;
        
        private save_test2Params msave_test2Params;
        
        private save_test3Params msave_test3Params;
        
        private save_test_with_dataParams msave_test_with_dataParams;
        
        private adding_formulaParams madding_formulaParams;
        
        private save_test_1Params msave_test_1Params;
        
        private Testing_saveasParams mTesting_saveasParams;
        
        private save_open2Params msave_open2Params;
        
        private invalidFormulaParams minvalidFormulaParams;
        
        private Test_close_button1Params mTest_close_button1Params;
        
        private invalidSyntax_circularExceptionParams minvalidSyntax_circularExceptionParams;
        
        private circular_exParams mcircular_exParams;
        
        private closeButton_saveParams mcloseButton_saveParams;
        
        private menuClose_saveParams mmenuClose_saveParams;
        
        private invalidFormula_syntaxParams minvalidFormula_syntaxParams;
        
        private save_with_different_extParams msave_with_different_extParams;
        
        private insure_ss_extParams minsure_ss_extParams;
        
        private open_wrong_extParams mopen_wrong_extParams;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UIPS6SpreadsheetWindow mUIPS6SpreadsheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIOpenWindow1 mUIOpenWindow;
        
        private UIPS6SpreadsheetWindow1 mUIPS6SpreadsheetWindow1;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UIFormulaErrorWindow mUIFormulaErrorWindow;
        
        private UICircularErrorWindow mUICircularErrorWindow;
        
        private UIChangeSelectionWindow mUIChangeSelectionWindow;
        
        private UIEditCellContentsWindow mUIEditCellContentsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Tests_recalculation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Tests_recalculationParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "=";
        
        /// <summary>
        /// Type '=a1+a2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=a1+a2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "4";
        
        /// <summary>
        /// Type '{Enter}{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_close_button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Test_close_buttonParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_formula_updating'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Test_formula_updatingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A1+A2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=A1+A2";
        
        /// <summary>
        /// Type '11' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "11";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_simple_add'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Test_simple_addParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A1+A2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=A1+A2";
        
        /// <summary>
        /// Type '2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_testParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'saveAs_test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class saveAs_testParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'dsfdsf' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dsfdsf";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'saveAs_test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class saveAs_test1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'xcvxcvdsv' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "xcvxcvdsv";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'open_save'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class open_saveParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'open_save1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class open_save1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'demo' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_test1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'dsfdsfdsfdsf' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dsfdsfdsfdsf";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_test2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sdfdsff' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "sdfdsff";
        
        /// <summary>
        /// Type 'dsfdsf' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dsfdsf";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing1";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_test3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowExePath = "C:\\Users\\dwilloug\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIPS6SpreadsheetWindowAlternateExePath = "%USERPROFILE%\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'esfdsfs' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "esfdsfs";
        
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test_with_data'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_test_with_dataParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1+A3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=A1+A3";
        
        /// <summary>
        /// Type '2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'testing.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'adding_formula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class adding_formulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1+A2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=A1+A2";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_test_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_test_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'dfgdfg' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "dfgdfg";
        
        /// <summary>
        /// Type 'dfg' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "dfg";
        
        /// <summary>
        /// Type 'dfgdfg' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dfgdfg";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Testing_saveas'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Testing_saveasParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dsfdsf' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dsfdsf";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_open2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_open2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'demo' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'invalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class invalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=a100' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=a100";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2+a100' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "=A1+A2+a100";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_close_button1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class Test_close_button1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'invalidSyntax_circularException'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class invalidSyntax_circularExceptionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '==' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "==";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=c4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "=c4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'circular_ex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class circular_exParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=c4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=c4";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'closeButton_save'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class closeButton_saveParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ddd' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "ddd";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'menuClose_save'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class menuClose_saveParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dddf' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dddf";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'invalidFormula_syntax'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class invalidFormula_syntaxParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=#$#' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=#$#";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=+' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "=+";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=ererere' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "=ererere";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '==' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "==";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=())' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "=())";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'save_with_different_ext'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class save_with_different_extParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dd' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "dd";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'All files (*.*)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Select 'testing.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing.txt";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'insure_ss_ext'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class insure_ss_extParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'ddd' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "ddd";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'testing.sss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing.sss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'open_wrong_ext'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class open_wrong_extParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'All files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All files (*.*)";
        
        /// <summary>
        /// Select 'testing.txt' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testing.txt";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIPS6SpreadsheetWindow : WinWindow
    {
        
        public UIPS6SpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "PS6 - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIPS6SpreadsheetTitleBar UIPS6SpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIPS6SpreadsheetTitleBar == null))
                {
                    this.mUIPS6SpreadsheetTitleBar = new UIPS6SpreadsheetTitleBar(this);
                }
                return this.mUIPS6SpreadsheetTitleBar;
            }
        }
        
        public UISpreadsheetPanel1Window1 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window1(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        
        private UIPS6SpreadsheetTitleBar mUIPS6SpreadsheetTitleBar;
        
        private UISpreadsheetPanel1Window1 mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveasMenuItem
        {
            get
            {
                if ((this.mUISaveasMenuItem == null))
                {
                    this.mUISaveasMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveasMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save as";
                    this.mUISaveasMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveasMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUISaveasMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveasMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIChangeSelectionsMenuItem
        {
            get
            {
                if ((this.mUIChangeSelectionsMenuItem == null))
                {
                    this.mUIChangeSelectionsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIChangeSelectionsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Change Selections";
                    this.mUIChangeSelectionsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIChangeSelectionsMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIChangeSelectionsMenuItem;
            }
        }
        
        public WinMenuItem UIEditCellContentsMenuItem
        {
            get
            {
                if ((this.mUIEditCellContentsMenuItem == null))
                {
                    this.mUIEditCellContentsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEditCellContentsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit Cell Contents";
                    this.mUIEditCellContentsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEditCellContentsMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIEditCellContentsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIChangeSelectionsMenuItem;
        
        private WinMenuItem mUIEditCellContentsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIContentsText
        {
            get
            {
                if ((this.mUIContentsText == null))
                {
                    this.mUIContentsText = new WinText(this);
                    #region Search Criteria
                    this.mUIContentsText.SearchProperties[WinText.PropertyNames.Name] = "Contents";
                    this.mUIContentsText.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIContentsText;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
                    this.mUIItemWindow.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIContentsText;
        
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIPS6SpreadsheetTitleBar : WinTitleBar
    {
        
        public UIPS6SpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanel1Window1 : WinWindow
    {
        
        public UISpreadsheetPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UILibrariesTreeItem UILibrariesTreeItem
        {
            get
            {
                if ((this.mUILibrariesTreeItem == null))
                {
                    this.mUILibrariesTreeItem = new UILibrariesTreeItem(this);
                }
                return this.mUILibrariesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UILibrariesTreeItem mUILibrariesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UILibrariesTreeItem : WinTreeItem
    {
        
        public UILibrariesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Libraries";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDocumentsTreeItem
        {
            get
            {
                if ((this.mUIDocumentsTreeItem == null))
                {
                    this.mUIDocumentsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDocumentsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Documents";
                    this.mUIDocumentsTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDocumentsTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDocumentsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDocumentsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        
        private WinComboBox mUISaveastypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITestingListItem UITestingListItem
        {
            get
            {
                if ((this.mUITestingListItem == null))
                {
                    this.mUITestingListItem = new UITestingListItem(this);
                }
                return this.mUITestingListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestingListItem mUITestingListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITestingListItem : WinListItem
    {
        
        public UITestingListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testing";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIListItem UISpreadsheetGUIListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIListItem == null))
                {
                    this.mUISpreadsheetGUIListItem = new UISpreadsheetGUIListItem(this);
                }
                return this.mUISpreadsheetGUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIListItem mUISpreadsheetGUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetGUIListItem : WinListItem
    {
        
        public UISpreadsheetGUIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemoListItem UIDemoListItem
        {
            get
            {
                if ((this.mUIDemoListItem == null))
                {
                    this.mUIDemoListItem = new UIDemoListItem(this);
                }
                return this.mUIDemoListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemoListItem mUIDemoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDemoListItem : WinListItem
    {
        
        public UIDemoListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UISizeEdit
        {
            get
            {
                if ((this.mUISizeEdit == null))
                {
                    this.mUISizeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISizeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Size";
                    this.mUISizeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUISizeEdit;
            }
        }
        
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISizeEdit;
        
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIPS6SpreadsheetWindow1 : WinWindow
    {
        
        public UIPS6SpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "PS6 - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIPS6SpreadsheetTitleBar1 UIPS6SpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIPS6SpreadsheetTitleBar == null))
                {
                    this.mUIPS6SpreadsheetTitleBar = new UIPS6SpreadsheetTitleBar1(this);
                }
                return this.mUIPS6SpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UIPS6SpreadsheetTitleBar1 mUIPS6SpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIPS6SpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UIPS6SpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("PS6 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("PS6 - Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFormulaErrorWindow : WinWindow
    {
        
        public UIFormulaErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Formula Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Formula Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Formula Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Formula Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICircularErrorWindow : WinWindow
    {
        
        public UICircularErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Circular Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Circular Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Circular Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Circular Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIChangeSelectionWindow : WinWindow
    {
        
        public UIChangeSelectionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Change Selection";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Change Selection");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Change Selection");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Change Selection");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIEditCellContentsWindow : WinWindow
    {
        
        public UIEditCellContentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Edit Cell Contents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Edit Cell Contents");
            #endregion
        }
        
        #region Properties
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow4 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Edit Cell Contents");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Edit Cell Contents");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
