using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Text.RegularExpressions;

namespace SS
{
    public partial class Form1 : Form
    {
        private Spreadsheet spreadsheet;

        public Form1()
        {
            
            InitializeComponent();

            // Create the spreadsheet model and the validator to check if the cell names are correct. 

            spreadsheet = new Spreadsheet(s => Regex.IsMatch(s, @"^[a-zA-Z]{1}[0-9]{1,2}$"), s => s.ToUpper(), "ps6");

            // registering a method so that it is notified when
            // an event happens.
            spreadsheetPanel1.SelectionChanged += displaySelection;
            spreadsheetPanel1.SetSelection(2, 3);

            displaySelection(spreadsheetPanel1); // update display when loaded
        }

        // Every time the selection changes, this method is called with the
        // Spreadsheet as its parameter. 
        /// <summary>
        /// Updates the panel display, cellDisplayTextBox, contentsTextBox, 
        /// </summary>
        /// <param name="ss"></param>
        private void displaySelection(SpreadsheetPanel ss)
        {
            int row, col;
            String value;
            ss.GetSelection(out col, out row);
            // ss.GetValue(col, row, out value);
            string nameOfCell = "" + GetExcelColumnName(col + 1) + (row + 1); // get cell name

            cellDisplayBox.Text = nameOfCell;

            


            // Set the value if there is a formula error
            var valueOfCell = spreadsheet.GetCellValue(nameOfCell); // get value of cell
            string valueOfCellString;

            if (valueOfCell is SpreadsheetUtilities.FormulaError)
            {
                valueOfCellString = "##########";
            }
            else
            {
                valueOfCellString = valueOfCell.ToString();
            }
            valueTextBox.Text = valueOfCellString;
            ss.SetValue(col, row, valueOfCellString); // update panel
            // Set the contents, append the '=' for convience 

            var contentsOfCell = spreadsheet.GetCellContents(nameOfCell);
            if (contentsOfCell is SpreadsheetUtilities.Formula)
            {
                contentsTextBox.Text = "=" + contentsOfCell.ToString();
            }
            else
            {
                contentsTextBox.Text = contentsOfCell.ToString();

            }
            

        }


        private string GetExcelColumnName(int columnNumber)
        {
            int dividend = columnNumber;
            string columnName = String.Empty;
            int modulo;

            while (dividend > 0)
            {
                modulo = (dividend - 1) % 26;
                columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
                dividend = (int)((dividend - modulo) / 26);
            }

            return columnName;
        }

        private int TranslateColumnNameToIndex(string name)
        {
            int position = 0;

            var chars = name.ToUpperInvariant().ToCharArray().Reverse().ToArray();
            for (var index = 0; index < chars.Length; index++)
            {
                var c = chars[index] - 64;
                position += index == 0 ? c : (c * (int)Math.Pow(26, index));
            }

            return position;
        }

        // Deals with the New menu
        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            SpreadsheetApplicationContext.getAppContext().RunForm(new Form1());
        }

        // Deals with the Close menu
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (spreadsheet.Changed)
            {
                DialogResult dialogResult = MessageBox.Show("The document has been modified. Would you like to save before you continue?","Warning" , MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    //do something
                }
                else if (dialogResult == DialogResult.No)
                {
                    Close();
                }
            }
            
        }

      

        private void contentsTextBox_Click(object sender, EventArgs e)
        {
             
           // ss.SetValue(col, row, DateTime.Now.ToLocalTime().ToString("T"));
           //  ss.GetValue(col, row, out value);
        }

        /// <summary>
        /// Updates and saves the spreadsheet contents, spreadsheetpanel, and display value
        /// </summary>
        private void updateCells()
        {
            try
            {
                //get name of cell
                SpreadsheetPanel ss = spreadsheetPanel1;
                int row, col;

                ss.GetSelection(out col, out row);
               
                string nameOfCell = "" + GetExcelColumnName(col + 1) + (row + 1); // get cell name

                ISet<string> dependentCells = spreadsheet.SetContentsOfCell(nameOfCell, contentsTextBox.Text);

                // get dependent cells

                // update dependentCells
                foreach (var name33 in dependentCells)
                {
                    Match m = Regex.Match(name33, @"([A-Z]+) *(\d)");
                    if (m.Success)
                    {
                        // get the column letter and convert it to a number
                        string translated = m.Groups[1].Value;
                        int column = TranslateColumnNameToIndex(translated) - 1;
                        int rowNumber = Int32.Parse(m.Groups[2].Value) - 1;

                        string valueOfDependentCellString;
                        var valueOfDependentCell = spreadsheet.GetCellValue(name33);

                        // Set the value if there is a formula error
                        if (valueOfDependentCell is SpreadsheetUtilities.FormulaError)
                        {
                            valueOfDependentCellString = "##########";
                        }
                        else
                        {
                            valueOfDependentCellString = valueOfDependentCell.ToString();
                        }
                        ss.SetValue(column, rowNumber, valueOfDependentCellString); // update panel
                    }
                }
            }

            // Catch formulaFormatException and circula exceptions and display a message
            catch (SpreadsheetUtilities.FormulaFormatException e)
            {
                MessageBox.Show(e.Message);
            }
            catch (SS.CircularException e)
            {
                MessageBox.Show("A cicular dependency was detected. Make sure the cell's formula doesn't depend on itself.");
            }

            displaySelection(spreadsheetPanel1);
        }

        private void contentsTextBox_Leave(object sender, EventArgs e)
        {
           // checkForFormulaError();
           // updateCells();
           
        }

        private void cellDisplayBox_TextUpdate(object sender, EventArgs e)
        {
            
           // contentsTextBox.Text = "";
        }

        private void contentsTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

              //  checkForFormulaError();
                updateCells();
            }
        }

        /// <summary>
        /// Checks if there is a formula error, if so displays an error message
        /// </summary>
        private void checkForFormulaError()
        {
            // row and col info from panel
            int row, col;
            String value;
            spreadsheetPanel1.GetSelection(out col, out row);
            spreadsheetPanel1.GetValue(col, row, out value);

            string nameOfCell = "" + GetExcelColumnName(col + 1) + (row + 1); // get cell name
            var valueOfCell = spreadsheet.GetCellContents(nameOfCell); // get value of cell
            // Display error if formula error
            if (valueOfCell is SpreadsheetUtilities.FormulaError)
            {

                MessageBox.Show(((SpreadsheetUtilities.FormulaError)valueOfCell).Reason);


            }
        }

        private void spreadsheetPanel1_KeyDown(object sender, KeyEventArgs e)
        {

        }

    
   

       

    

     

     

      
    }
}
